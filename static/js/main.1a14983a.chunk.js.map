{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","App","onSearchChange","event","searchField","target","value","theRobot","console","log","fetch","response","json","filteredRobots","filter","paramRobot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCOCQ,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAM,2BAA2BC,IAAG,+BAA2BH,EAA3B,cACzC,gCACI,+BAAKF,EAAL,OACA,4BAAIC,WCkBLK,EAvBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAOTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAQ,cAAC,EAAD,CAERT,GAAMK,EAAOI,GAAGT,GAChBF,KAAQO,EAAOI,GAAGX,KAClBC,MAASM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAOrB,OACI,8BACKM,KCPEI,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACI,uBAAOA,UAAW,gCAClBW,KAAO,SACPC,YAAY,wCACZC,SAAUH,OCKPI,G,MAXA,SAACC,GACZ,OAII,aAHA,CAGA,OAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aCuBJC,E,kDA5BX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CACRC,UAAU,GAJA,E,qDAWnB,WACIC,KAAKC,SAAS,CAAEF,UAAU,M,oBAG9B,WACI,OAAIC,KAAKF,MAAMC,SAEP,+EAKJC,KAAKT,MAFT,a,GAtBmBW,aCwFZC,E,kDAhFb,aAAe,IAAD,8BACZ,gBAQFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAR1C,EAAKV,MAAQ,CACXW,SAAU,GACVH,YAAa,IAEfI,QAAQC,IAAI,gCANA,E,qDAuBd,WAAqB,IAAD,OAKlBC,MAAM,8CACH9C,MAAK,SAAC+C,GACL,OAAOA,EAASC,UAEjBhD,MAAK,SAACc,GACL,EAAKqB,SAAS,CAAEQ,SAAU7B,OAK9B8B,QAAQC,IAAI,sD,oBAGd,WAAS,MAG2BX,KAAKF,MAA/BW,EAHD,EAGCA,SAAUH,EAHX,EAGWA,YAEZS,EAAiBN,EAASO,QAAO,SAACC,GACtC,OAAOA,EAAW5C,KAAK6C,cAAcC,SAASb,EAAYY,kBAc5D,OAXAR,QAAQC,IAAI,uCAWY,IAApBF,EAASW,OACJ,yCAGL,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,iCACA,cAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAE9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUxB,OAAQmC,e,GAxEdb,aCClBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.1a14983a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt = 'details of all the robot' src ={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name} </h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    // Cara testing dengan bikin ERROR yang DISENGAJA\r\n    // if (true) {\r\n    //     throw new Error (\"noooooo !!!!\")\r\n    // }\r\n\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (<Card \r\n        key = {robots[i].id} \r\n        id = {robots[i].id} \r\n        name = {robots[i].name} \r\n        email = {robots[i].email}\r\n        />);\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className ='pa3 ba b--green bg-light-blue' \r\n            type = 'search' \r\n            placeholder='search your robot by part of its name'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        // Double curly braces \"{{ }}\" to make style expression inside a JSX statement\r\n        // Create a SCROLLING FEATURE for the props.children (the TAG that is inside the <SCROLL> tag at app.js\r\n        // - that is the <CardList> TAG)\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px' }}> \r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll\r\n\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             hasError: false\r\n        }\r\n    }\r\n\r\n    // Komponen LIFE CYCLE baru yang mulai ada id React versi 16 (componentDidCatch)\r\n    // Jika ada ditemukan error dalam coding maka otomatis akan dijalankan method ini (componentDidCatch)\r\n    // LIFE CYCLE hanya ada di CLASS\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true})\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>Oops, that is not good for the user to see!!!</h1>\r\n            )\r\n        }\r\n        return ( \r\n            // Jalankan \"children props\" = jalankan apa saja yang \"in between / diantara\" <errorBoundry> tag nantinya\r\n            this.props.children\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React, { Component } from \"react\";\r\n// import { isCompositeComponentWithType } from 'react-dom/test-utils';\r\nimport CardList from \"../components/CardList.js\";\r\n// import { robots } from './robots.js';./components\r\nimport SearchBox from \"../components/SearchBox.js\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll.js\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      theRobot: [],\r\n      searchField: \"\",\r\n    };\r\n    console.log(\"MOUNTING CYCLE : Constructor\");\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  // componentDidMount() adalah method yang dipanggil terakhir kali dalam MOUNTING cycle;\r\n  // MOUNT CYCLE (waktu web jalan pertama kali):\r\n  // 1. constructor\r\n  // 2. render\r\n  // 3. componentDidMount()\r\n\r\n  // UPDATING CYCLE: (dijalankan setelah MOUNT CYCLE)\r\n  // 1. render\r\n  // 2. componentDidUpdate()\r\n  // Method ini salah satu adalah method/function \"life cycle\" bawaan react, jadi declare nya tidak pakai arrow function / method\r\n  componentDidMount() {\r\n    // Jika ambil data nya dari record pada file robots.js di harddsik (pasanngannya \"import { robots } from './robots.js')\r\n    // this.setState({theRobot : robots});\r\n\r\n    // Jika ambil data nya dari suatu sumber lain (web site lain) di internet\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((robots) => {\r\n        this.setState({ theRobot: robots });\r\n      });\r\n    // karena ada perubahan value/isi dari state robot \"pada function ini\" (dianggap terjadi \"state update\")\r\n    // maka render akan dijalankan 1x lagi (karena telah terjadi UPDATING / masuk proses UPDATING CYCLE)\r\n    // setelah itu jalankan method/function componentDidUpdate() (Jika terdapat method componentDidUpdate() ini pada class nya)\r\n    console.log(\"MOUNTING CYCLE : componentDidMount method called\");\r\n  }\r\n\r\n  render() {\r\n    // Baris ini adalah untuk DESCTRUCTURING, artinya supaya kita tidak usah tulis \"this.state\" berulang kali\r\n    // cukup ditulis / di declare 1x saja di const beserta {nama-nama variable yang pakai this.state nya}\r\n    const { theRobot, searchField } = this.state;\r\n\r\n    const filteredRobots = theRobot.filter((paramRobot) => {\r\n      return paramRobot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    console.log(\"MOUNTING OR UPDATING CYCLE : Render\");\r\n\r\n    // Jika hasil \"Fetch\" data dari website lain terlalu lama loading nya (misal data jumlah nya sangat banyak)\r\n\r\n    // Scroll is a Component that WRAPS \"other component\" (WRAPS CardList component)\r\n    // Scroll will have props.children (the children refer to the \"CardList\" component)\r\n    // Example of using \"Special tag: like the <Scroll> </Scroll> tag\" in wrapping other special tag in react\r\n    // can be seen in Scroll.js (using props.children where the CardList tag is considered as the children element of Scroll tag)\r\n\r\n    // Jika data theRobot belum selesai di loading (lenght nya masih belum terbacah atau = 0)\r\n    // maka munculkan tulisan \"loading\" (atau \"sedang loading data\")\r\n    if (theRobot.length === 0) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">Leo's Robot Friends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// npmimport App from './App.js';\n// import Hello from './Hello.js';\n// import Card from './Card.js';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from \"./containers/App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}